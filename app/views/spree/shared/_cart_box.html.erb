<%= render partial: 'spree/shared/error_messages', locals: { target: @order } %>
<% order_form&.object&.line_items.each do |line_item| %>
  <%= order_form&.fields_for :line_items, line_item do |item_form| %>
    <li class="cart-item line-item cart-line-item-container-<%= line_item.id %> shopping-cart-item " data-lineitem-id= "<%= line_item.id %>">
      <button type="button" class="btn btn-primary remove-btn popup-cart-delete js-line-item-delete-btn-<%= line_item.id %> " data-line-item-id="<%= line_item.id %>" >Close</button>
      <% if line_item&.variant&.images.length == 0 %>
        <%= link_to small_image(line_item&.variant&.product), line_item&.variant&.product,class: 'thumbnail' %>
      <% else %>
        <%= link_to image_tag(main_app.url_for(line_item&.variant&.images&.first&.url(:small))),line_item&.variant&.product ,class: 'thumbnail' %>
      <% end %>
      <div class="cart-item-details d-flex flex-column justify-content-between">
        <h4><%= link_to line_item&.name, line_item&.variant&.product %></h4>
          <%= item_form.number_field :quantity, min: 0, class: " quantity-box custom-select qty-dropdown shopping-cart-item-quantity-input quantity-box jsAddItem jsSubItem ", size: 5, data: { id: dom_id(line_item) }, aria: { label: Spree.t('cart_page.change_quantity') } %>
          <div class="price-size text-right" data-hook="cart_item_price">
            <span><%= line_item.quantity %>x<%= line_item.single_money.to_html%></span> <%= line_item.display_amount.to_html unless line_item.quantity.nil?  %> 
          </div>
      </div>
    </li>
  <% end %>
<% end %>

<script>
  function cartForm(orderNumber, token) {
    let that = this;
    this.orderForm = $('form#product_cart_form');
    this.lineItems = [];
    this.tok = $('.cart-line-items').data('order-tok');
    this.orderResponse = null;
    this.newLineItem = null;
    this.orderNum = orderNumber;
    this.orderToken = token;
    this.lineItemId = $('.js-line-item-change').data('js-line-item-id');
    this.render = function (order) {
      this.updateSummaryGeneral(order);
      this.updatePopup(order);
    }
  
    this.updateItem = function (item, action, qtyChange, cb) {
      let parentRow = $(item).parents('.line-item').first();
      let lineItemId = $(parentRow).data('lineitem-id');
      const $vendorBox = $($(item).parents('.sip-box').first());
      let orderNum = that.orderNum;
      let orderToken = that.orderToken;
      let data = {user_id: '', order: {line_items_attributes: [{quantity: qtyChange, id: lineItemId}]}};
      $.ajax({
        url: "/api/v1/orders/" + orderNum + "?order_token=" + orderToken,
        type: 'PUT',
        contentType: 'application/x-www-form-urlencoded',
        data: data,
        success: function (result) {
          if (qtyChange === 0) {
            $(parentRow).remove();
            $('.cart-line-item-container-'+lineItemId).addClass('deleted');
            $('.cart-line-item-container-'+lineItemId).remove();
            $('.cart-item-count').html($('.cart-line-item-container').not('.deleted').length);
            if ($('.shopping-cart-item').length == 0){
              $('.empty-cart-area').html('<div class="cart-sidebar-body d-flex flex-column justify-content-between"><div class="text-center"><%= image_tag "empty_cart.svg", alt:"Empty Cart" %><h3>Your cart is empty</h3><p>Looks like you haven&lsquo;t made your choice yet...</p><%= link_to  spree.products_path do %><button type="button" class="btn btn-primary"><strong>Shop Now</strong></button><% end %></div></div>');
              $('.cart-summary').html('') 
              //window.location = '/cart' 
            }
            if (!$vendorBox.find('.line-item').length) {
              $vendorBox.addClass('deleted');
              $vendorBox.remove();
              if(!$('.sip-box').not('.deleted').length){
                $('.items_cart_list').html(`<li><table class="table table-striped">
                                    <tbody><tr>
                                          <td class="text-center" style="width:70px">
                                            <%= Spree.t('header_cart.empty_items') %>
                                          </td>
                                        </tr> </tbody></table></li> `);
                $('.cart-cta').html();
              }
  
            }
          }
          let new_str_count =qtyChange
          if(new_str_count.toString().length == 1){
            new_str_count = '0'+ new_str_count.toString()
          }
          //that.updateVendorSummary(item, result);

          updateSummaryGeneral(result);
        },
  
        error: function (xhr, ajaxOptions, thrownError,status) {
          $('.app-loader').hide();
          let response = xhr.responseJSON;
          toastr.error(xhr.responseText);
        }
  
      });
    };
  
    this.updateVendorSummary = function (item, order) {
      const vendorBox = $(item).parents('.sip-box').first();
      const vendorId = $(vendorBox).data('vendor-id');
  
      const renderAlignShipmentNum = () => {
        let allBoxes = $('.sip-box').not('.deleted');
        $.each(allBoxes, function (index, el) {
          let lis = $(el).find('.line-item');
          let totalPrice = 0;
          let totalCount = 0;
          let displayPrice = '';
  
          $.each(lis, function (index, liEl) {
            let {liCount,liPrice,liCurrency} = boxSingleItem(liEl);
  
            totalPrice += (liCount * liPrice);
            totalCount += liCount;
            liCurrency = liCurrency.replace(/,/, "");
  
            if (lis.length === index + 1) {
              if (liCurrency == "$"){
                displayPrice =  liCurrency + ' ' + totalPrice.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",");
              }else{
                displayPrice = totalPrice.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + ' ' + liCurrency;
              }
            }
          })
        })
      }
  
      sum = 0;
      Object(order).line_items && order.line_items.forEach((li) => {
        if (parseInt(li.variant.vendor_id) === parseInt(vendorId)) {
          let cost = li.display_amount;
          let itemCount = li.quantity;
          renderQtyLabels(itemCount, li);
          renderItemTotalPrice(cost, li);
        }
        let cost = li.display_amount;
        this.renderItemTotalPrice(cost, li);
        sum += li.quantity;
        $('.cart-item-count').html(sum);
      });
  
      renderAlignShipmentNum();
      this.updateSummaryGeneral(order);
  
    };
  
    this.renderItemTotalPrice = function (cost, li) {
      $(".js-lineitem-total-" + li.id ).html(cost);
    }
  
    this.updateSummaryGeneral = function (order) {
      $('.js-order-total').html(order.display_total);
      $('.js-product-total').html(order.display_item_total)
    }
  
    this.addItem = function (e) {
      e.preventDefault();
      $qtyEl = $(this).siblings('.line_item_quantity').first();
      let currentCount = parseInt($qtyEl.val());
      let newCount = currentCount + 1;
      $qtyEl.val(newCount);
      that.updateItem(this, 'add', newCount);
    };
  
    this.subItem = function (e) {
      e.preventDefault();
      $qtyEl = $(this).siblings('.line_item_quantity').first();
      let currentCount = parseInt($qtyEl.val());
      let newCount = currentCount - 1;
      $qtyEl.val(newCount);
      that.updateItem(this, 'sub', newCount);
    };
  
    this.removeItemFromPopup = function(e){
      e.preventDefault();

      const lineItemId = $(this).data('line-item-id');
      console.log("remove "+ lineItemId)
      that.updateItem($('.js-line-item-delete-btn-'+lineItemId), 'sub', 0);
    }
    this.updatePopup = function(order){
      $('.js-popup-cart-total').html(order.display_item_total)
    }
    $('body').on('click', '.popup-cart-delete', this.removeItemFromPopup);
    $('body').on('click', '.jsAddItem', this.addItem);
    $('body').on('click', '.jsSubItem', this.subItem);
  }
</script>
<script>
  cartForm("<%= current_order.try(:number) %>", "<%= current_order.try(:token) %>");
</script>




